package com.example.wort_des_tages_app.views

import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowDropDown
import androidx.compose.material.icons.filled.Check
import androidx.compose.material3.Button
import androidx.compose.material3.DropdownMenu
import androidx.compose.material3.DropdownMenuItem
import androidx.compose.material3.Icon
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableIntStateOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberUpdatedState
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.lifecycle.viewModelScope
import androidx.lifecycle.viewmodel.compose.viewModel
import com.example.wort_des_tages_app.viewmodels.AnzahlWoerter
import com.example.wort_des_tages_app.viewmodels.SettingsState
import com.example.wort_des_tages_app.viewmodels.SettingsViewModel
import kotlinx.coroutines.launch

// TODO rename stuff
@Composable
fun Settings(modifier: Modifier = Modifier, settingsViewModel: SettingsViewModel) {
    val settingsState by settingsViewModel.state.collectAsState()

    Button(onClick = {
        settingsViewModel.setAnzahlWoerter(AnzahlWoerter.FIVE)
    }) {
        Text("YO")
    }

    val isDropDownExpanded = remember {
        mutableStateOf(false)
    }

    val itemPosition by rememberUpdatedState(settingsState.anzahlWoerter)

    val usernames = AnzahlWoerter.values().map { it.value.toString() }

    if (itemPosition != null) {
        Column(
            modifier = modifier
                .fillMaxSize()
                .padding(30.dp),
            verticalArrangement = Arrangement.Top
        ) {
            Box {
                Row(
                    horizontalArrangement = Arrangement.Center,
                    verticalAlignment = Alignment.CenterVertically,
                    modifier = Modifier.clickable {
                        isDropDownExpanded.value = true
                    }
                ) {
                    Text("Anzahl der WoÌˆrter: ")
                    Text(text = itemPosition!!.value.toString())
                    Icon(Icons.Filled.ArrowDropDown, "Dropdown Icon")
                }
                DropdownMenu(
                    expanded = isDropDownExpanded.value,
                    onDismissRequest = {
                        isDropDownExpanded.value = false
                    }) {
                    usernames.forEachIndexed { index, username ->
                        DropdownMenuItem(text = {
                            Text(text = username)
                        },
                            onClick = {
                                isDropDownExpanded.value = false
//                                settingsViewModel.setAnzahlWoerter(AnzahlWoerter.fromInt(index + 1))
                                settingsViewModel.viewModelScope.launch {
                                    settingsViewModel.setAnzahlWoerter(AnzahlWoerter.fromInt(username.toInt()))
                                }
                            })
                    }
                }
            }
        }
    }
}